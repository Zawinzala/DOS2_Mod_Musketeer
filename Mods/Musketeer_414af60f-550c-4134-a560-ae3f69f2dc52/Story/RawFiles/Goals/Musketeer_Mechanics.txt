Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_Musketeer_RifleEquipped((CHARACTERGUID)NULL_00000000-0000-0000-0000-000000000000,0);
//DB_Musketeer_Executioner_AmmoRefunded((CHARACTERGUID)_Player, 0);

// Reload is special exception and not included in the skill-database.
DB_Musketeer_Skillist("Projectile_Rifle_Snipe", -1);
DB_Musketeer_Skillist("Projectile_Unload", 0);
DB_Musketeer_Skillist("Target_Unload_Test", 0);
DB_Musketeer_Skillist("Target_Mark_Target", 0);
DB_Musketeer_Skillist("Projectile_Rend_The_Marked", -1);
DB_Musketeer_Skillist("Projectile_Buckshot", -2);
DB_Musketeer_Skillist("Projectile_Final_Act", -1);
DB_Musketeer_Skillist("Projectile_Tracking_Shot", -1);
DB_Musketeer_Skillist("Projectile_Rapidfire", -2);
DB_Musketeer_Skillist("Projectile_Rifle_Scattershot", -2);
DB_Musketeer_Skillist("Target_Musk_Flare_Test_Target", -1);
//DB_Musketeer_Skillist("Target_Unload_Test", 0);
DB_Musketeer_Skillist("Shout_Reload", 11);
DB_Musketeer_Skillist("Rush_Musk_Blitzkrieg", 1);

KBSECTION
IF
GameStarted(_, _)
THEN
NRD_GameStarted();
//NRD_DebugLog("[WT_FS] Game Started. (ALSO CALLING NRD_GameStarted)");

IF
SavegameLoaded(_, _, _, _)
THEN
NRD_DebugLog("[WT_FS] Savegame loaded.");

IF
//SkillAdded(_Player, "Shout_Musketeer_Passive", 0)
CharacterItemEvent(_Player, _Item, "Musketeer_Rifle_Equipped")
AND
CharacterGetEquippedWeapon(_Player, _Weapon)
THEN
SetTag(_Player, "Rifle_Armed");
CharacterAddSkill(_Player, "Shout_Reload");
DB_Musketeer_RifleEquipped(_Player, 1);
NRD_AmmoBar_Set_GUI(_Player, "val", 1);
Musketeer_Ammo_Requirement_Tags((ITEMGUID)_Weapon, _Player);
Musketeer_Rifle_Range_Tags((ITEMGUID)_Weapon, _Player);
//NRD_DebugLog("[WT_FS] Musketeer Rifle equipped..");


IF
ObjectWasTagged(_Character, "Rifle_Armed")
AND
ObjectIsCharacter(_Character, 1)
AND
HasActiveStatus(_Character, "OdinHUN_SEEKINGARROWS", 1)
THEN
RemoveStatus(_Character, "OdinHUN_SEEKINGARROWS");
NRD_DebugLog("[COMPATIBILITY] Removed [Seeking Arrows] Status, not compatible with rifles");

// DEPRECATED
// No longer needed. Same functionality implemented in Lua.
/*
IF
DB_Musketeer_ModStarted(1)
AND
DB_Musketeer_Skillist(_SkillName, _AmmoCost)
AND
NOT _AmmoCost == 0
THEN
NRD_Broadcast_Rifle_Skill("val", (STRING)_SkillName, (INTEGER)_AmmoCost);
*/

PROC
Musketeer_Send_Ammo_Count((CHARACTERGUID)_Player, (ITEMGUID)_Weapon)
AND
ItemGetCharges(_Weapon, _Ammo)
AND
ItemGetMaxCharges(_Weapon, _MaxAmmo)
THEN
NRD_AmmoBar_Set_Max_Ammo(_Player, "val", _MaxAmmo);
NRD_AmmoBar_Set_Ammo(_Player, "val",_Ammo);


// Trigger dynamic range check on level up, as that might cause the range to reset.
IF
CharacterLeveledUp(_Player)
AND
//CharacterHasSkill(_Player, "Shout_Musketeer_Passive", 1)
IsTagged(_Player, "Rifle_Armed", 1)
AND
CharacterGetEquippedWeapon(_Player, _Weapon)
THEN
Musketeer_Rifle_Range_Tags((ITEMGUID)_Weapon, _Player);



// When a player no longer has the Passive-Skill, then we know he doesn't have a rifle equipped anymore.
// We clear all rifle-tags, otherwise they would persist when equipping another rifle.
IF
CharacterItemEvent(_Player, _Item, "Musketeer_Rifle_Unequipped")
//SkillDeactivated(_Player, "Shout_Musketeer_Passive")
//AND
//CharacterHasSkill(_Player, "Shout_Musketeer_Passive", 0)
THEN
//DisplayText(_Player, "<font color='#00FF00' size='30'>No longer pew pew ready</font>");
//CharacterRemoveSkill(_Player, "Shout_Reload");
DB_Musketeer_RifleEquipped(_Player, 0);
ClearTag(_Player, "Rifle_Armed");
ClearTag(_Player, "Musketeer_None_Left");
ClearTag(_Player, "Musketeer_AtLeast_One_Left");
ClearTag(_Player, "Musketeer_AtLeast_Two_Left");
RemoveStatus(_Player, "MUSK_RANGE_LONG");
RemoveStatus(_Player, "MUSK_RANGE_SHORT");
RemoveStatus(_Player, "MUSK_RANGE_MEDIUM");
RemoveStatus(_Player, "MUSK_RANGE_LONG_LW");
RemoveStatus(_Player, "MUSK_RANGE_SHORT_LW");
RemoveStatus(_Player, "MUSK_RANGE_MEDIUM_LW");
NRD_AmmoBar_Set_GUI(_Player, "val", 0);
//RemoveStatus(_Player, "MUSK_RANGE_10");
//CharacterRemoveAbility(_Player, "Repair", 5);





// Auto-Reload weapon before combat begins.
// QoL, seems tedious that a player has to remember to reload before every fight.
IF
CombatStarted(_Combat)
AND
DB_IsPlayer(_Character)
AND
CharacterIsInCombat(_Character, 1)
AND
IsTagged(_Character, "Rifle_Armed", 1)
AND
CharacterGetEquippedItem(_Character, "Weapon" ,_Weapon)
THEN
ItemResetChargesToMax((ITEMGUID)_Weapon);
Musketeer_Ammo_Requirement_Tags((ITEMGUID)_Weapon, _Character);

// Auto-Reload weapon after combat is over.
// QoL, seems tedious that a player has to reload after every fight.
IF
ObjectLeftCombat(_Character, _Combat)
AND
ObjectIsCharacter(_Character, 1)
AND
DB_IsPlayer((CHARACTERGUID)_Character)
AND
IsTagged(_Character, "Rifle_Armed", 1)
AND
CharacterGetEquippedItem(_Character, "Weapon" ,_Weapon)
THEN
ItemResetChargesToMax((ITEMGUID)_Weapon);
Musketeer_Ammo_Requirement_Tags((ITEMGUID)_Weapon, _Character);


// Reload when using a bedroll, QoL
IF
CharacterUsedItemTemplate(_Character,_Temp,_)
AND
DB_RestTemplates(_Temp,_Consume,_PartyRadius,_SafeRadius)
AND
DB_IsPlayer((CHARACTERGUID)_Character)
AND
CharacterIsInCombat(_Character, 0)
AND
IsTagged(_Character, "Rifle_Armed", 1)
AND
CharacterGetEquippedItem(_Character, "Weapon" ,_Weapon)
THEN
ItemResetChargesToMax((ITEMGUID)_Weapon);
Musketeer_Ammo_Requirement_Tags((ITEMGUID)_Weapon, _Character);

// Consume item charges when player uses a Rifle-Skill
IF
//CharacterUsedSkill(_Character, _Skill, _, _)
SKillCast(_Character, _Skill, _, _)
AND
DB_Musketeer_Skillist(_Skill, _Amount)
AND
IsTagged(_Character, "Rifle_Armed", 1)
AND
CharacterGetEquippedItem(_Character, "Weapon" ,_Weapon)
THEN
Musketeer_Consume_Ammo((ITEMGUID)_Weapon, (INTEGER)_Amount, _Character);
//Musketeer_Update_Ammo_Skills(_Character);


// Auto-Attacking also consumes Ammo. A player should not be able to basic attack when out of ammo.

// If Character has no ammo left, he cannot basic attack.
IF
CharacterStartAttackObject(_, _, _Character)
AND
HasActiveStatus(_Character, "CHARMED", _Charmed)
AND
HasActiveStatus(_Character, "MADNESS", _Mad)
AND
HasActiveStatus(_Character, "TAUNTED", _Taunted)
AND
IntegerMax(_Charmed, _Mad, _tempMax)
AND
IntegerMax(_tempMax, _Taunted, 0)
AND
IsTagged(_Character, "Musketeer_None_Left", 1)
THEN
//ApplyStatus(_Character, "DISARMED", 0.0);
CharacterUseSkill(_Character, "Target_Unload_Buffer", _Character);
CharacterAddActionPoints(_Character, 2);
//DisplayText(_Character, "<font color='#00FF00' size='30'>Out of Ammo!</font>");


IF
CharacterStartAttackPosition(_, _, _, _, _Character)
AND
HasActiveStatus(_Character, "CHARMED", _Charmed)
AND
HasActiveStatus(_Character, "MADNESS", _Mad)
AND
HasActiveStatus(_Character, "TAUNTED", _Taunted)
AND
IntegerMax(_Charmed, _Mad, _tempMax)
AND
IntegerMax(_tempMax, _Taunted, 0)
AND
IsTagged(_Character, "Musketeer_None_Left", 1)
AND
CharacterGetEquippedWeapon(_Character, _Weapon)
THEN
CharacterUseSkill(_Character, "Target_Unload_Buffer", _Character);
CharacterAddActionPoints(_Character, 2);
Musketeer_Consume_Ammo((ITEMGUID)_Weapon, 1, _Character);
//DisplayText(_Character, "<font color='#00FF00' size='30'>Out of Ammo!</font>");

/*
IF
CharacterStartAttackObject(_, _, _Character)
AND
HasActiveStatus(_Character, "CHARMED", 1)
AND
IsTagged(_Character, "Musketeer_None_Left", 1)
THEN
NRD_DebugLog("[Musketeer] Character is charmed and out of Ammo, ignoring Ammo-check");

IF
CharacterStartAttackPosition(_, _, _, _, _Character)
AND
HasActiveStatus(_Character, "CHARMED", 1)
AND
IsTagged(_Character, "Musketeer_None_Left", 1)
THEN
NRD_DebugLog("[Musketeer] Character is charmed and out of Ammo, ignoring Ammo-check");
*/
// Consume 1 Ammo when Character uses basic attack.
IF
CharacterStartAttackObject(_, _, _Character)
AND
IsTagged(_Character, "Musketeer_None_Left", 0)
AND
IsTagged(_Character, "Musketeer_AtLeast_One_Left", 1)
AND
CharacterGetEquippedWeapon(_Character, _Weapon)
THEN
//ApplyStatus(_Character, "DISARMED", 0.0);
Musketeer_Consume_Ammo((ITEMGUID)_Weapon, -1, _Character);
//DisplayText(_Character, "<font color='#00FF00' size='30'>Out of Ammo!</font>");


IF
CharacterStartAttackPosition(_, _, _, _, _Character)
AND
IsTagged(_Character, "Musketeer_None_Left", 0)
AND
IsTagged(_Character, "Musketeer_AtLeast_One_Left", 1)
AND
CharacterGetEquippedWeapon(_Character, _Weapon)
THEN
Musketeer_Consume_Ammo((ITEMGUID)_Weapon, -1, _Character);

/*
PROC 
Musketeer_Update_Ammo_Skills((CHARACTERGUID)_Player)
AND
DB_IsPlayer(_Player)
THEN
//DisplayText(_Player, "<font color='#00FF00' size='30'>Updating Ammo related stuff..</font>");
//Deactivate
//DebugBreak("[WT_FS] Ammo Update PROC.");
DB_NOOP(1);
*/

//REGION Musketeer_Ammo_Management

// Use this PROC to consume the specified amount of charges when a Ammunition consuming Skill is used.
PROC
Musketeer_Consume_Ammo((ITEMGUID)_Weapon, (INTEGER)_Amount, (CHARACTERGUID)_Character)
THEN
ItemAddCharges(_Weapon, _Amount);
Musketeer_Ammo_Requirement_Tags(_Weapon, _Character);
NRD_Client_Refresh_Hotbar(_Character);
//ApplyStatus(_Character, "CLEAR_MINDED", 0.0, 1, _Character);
// Apply a empty status to force a skillbar tag-requirement refresh.
//ApplyStatus(_Character, "MUSK_NULL_STATUS", 0.0, 1, _Character);


// The following PROCs handle the Ammunition tagging.
// the "MUSK_NULL_STATUS" grants +1 to "Repair" and forces a UI refresh.
// Without that, tag requirements are not updated on the skills.

PROC
Musketeer_Ammo_Requirement_Tags((ITEMGUID)_Weapon, (CHARACTERGUID)_Character)
AND
ItemGetCharges(_Weapon, _RemainingAmmo)
AND
ItemGetMaxCharges(_Weapon, _MaxCharges)
AND
_MaxCharges > 0
AND
_RemainingAmmo <= 0
THEN
SetTag(_Character, "Musketeer_None_Left");
ClearTag(_Character, "Musketeer_AtLeast_One_Left");
ClearTag(_Character, "Musketeer_AtLeast_Two_Left");
ClearTag(_Character, "Musketeer_Exactly_One_Left");
//ApplyStatus(_Character, "DISARMED", -1.0, 1, _Character);
//DebugBreak("[WT_FS] No Ammo left.");
ApplyStatus(_Character, "MUSK_NULL_STATUS", 0.0, 1, _Character);

// When exactly 1 Ammo remaining, set armed, Atleast one and clear Atleast two.
PROC
Musketeer_Ammo_Requirement_Tags((ITEMGUID)_Weapon, (CHARACTERGUID)_Character)
AND
ItemGetCharges(_Weapon, _RemainingAmmo)
AND
_RemainingAmmo == 1
THEN
SetTag(_Character, "Musketeer_Exactly_One_Left");
SetTag(_Character, "Musketeer_AtLeast_One_Left");
ClearTag(_Character, "Musketeer_AtLeast_Two_Left");
//RemoveStatus(_Character, "DISARMED");
ClearTag(_Character, "Musketeer_None_Left");
//DebugBreak("[WT_FS] Exactly 1 round left.");
ApplyStatus(_Character, "MUSK_NULL_STATUS", 0.0, 1, _Character);

// When at least 2 Ammo remaining, set armed, Atleast one, Atleast two.
PROC
Musketeer_Ammo_Requirement_Tags((ITEMGUID)_Weapon, (CHARACTERGUID)_Character)
AND
ItemGetCharges(_Weapon, _RemainingAmmo)
AND
_RemainingAmmo >= 2
THEN
SetTag(_Character, "Musketeer_AtLeast_Two_Left");
SetTag(_Character, "Musketeer_AtLeast_One_Left");
//RemoveStatus(_Character, "DISARMED");
ClearTag(_Character, "Musketeer_None_Left");
ClearTag(_Character, "Musketeer_Exactly_One_Left");
//DebugBreak("[WT_FS] At least 2 rounds left.");
ApplyStatus(_Character, "MUSK_NULL_STATUS", 0.0, 1, _Character);

// Send Ammo Update event for client-side AmmoBar
PROC
Musketeer_Ammo_Requirement_Tags((ITEMGUID)_Weapon, (CHARACTERGUID)_Character)
THEN
Musketeer_Send_Ammo_Count(_Character, _Weapon);

//END_REGION

IF
StoryEvent(_Character, "Musketeer_Check_Dynamic_Range")
AND
ObjectIsCharacter(_Character, 1)
AND
CharacterGetEquippedWeapon((CHARACTERGUID)_Character, _Weapon)
THEN
Musketeer_Rifle_Range_Tags((ITEMGUID)_Weapon, _Character);
NRD_DebugLog("[OSIRIS] Character's Dynamic Range Status changed, updating Dynamic Range");

IF
CharacterResurrected(_Character)
AND
//CharacterHasSkill(_Character, "Shout_Musketeer_Passive", 1)
IsTagged(_Character, "Rifle_Armed", 1)
AND
CharacterGetEquippedWeapon(_Character, _Weapon)
THEN
Musketeer_Rifle_Range_Tags((ITEMGUID)_Weapon, _Character);
NRD_DebugLog("[OSIRIS] Character resurrected, Updating Dynamic Rifle-Range");

IF
CharacterResurrected(_Character)
THEN
NRD_DebugLog("[OSIRIS] Character resurrected, is Dynamic range being updated?");

IF
DB_Illusionist((CHARACTERGUID)_Player, (ITEMGUID)_Mirror)
AND
IsTagged(_Player, "Rifle_Armed", 1)
AND
GetUUID(_Player, _UUID)
THEN
NRD_AmmoBar_SetCC_Visibility(_UUID, 1);
NRD_DebugLog("[OSIRIS] DB_Illusionist player added");

IF
CharacterCreationStarted(_Level)
AND
DB_IsPlayer(_Player)
AND
DB_Illusionist(_Player, (ITEMGUID)_Mirror)
AND
GetUUID(_Player, _UUID)
THEN
//NRD_AmmoBar_Check_Visibility(_UUID);
NRD_DebugLog("[OSIRIS] Character Creation Started for someone");

PROC
Proc_HomesteadTeleportAfterMirror((CHARACTERGUID)_Player,(ITEMGUID)_Mirror,(TRIGGERGUID)_Trigger)
AND
DB_IsPlayer(_Player)
AND
GetUUID(_Player, _UUID)
THEN
NRD_AmmoBar_SetCC_Visibility(_UUID, 0);
NRD_DebugLog("[OSIRIS] Character Creation is over for someone");

/*
IF
NRD_OnActionStateEnter(_Character, "Attack")
AND
DB_IsPlayer((CHARACTERGUID)_Character)
AND
String(_Character, _CharGUIDString)
THEN
//NRD_ActionStateGetInt((CHARACTERGUID), )
NRD_DebugLog("Player Attack Event");
NRD_DebugLog(_CharGUIDString);
*/
/*
IF
NRD_OnActionStateEnter(_Character, "Attack")
AND
DB_IsPlayer((CHARACTERGUID)_Character)
THEN
//AND
//String(_Character, _CharGUIDString)
//THEN
//NRD_ActionStateGetInt((CHARACTERGUID), )
NRD_Musketeer_AS(_Character);

// "Hit" detection never fired, thus trying out lowerCaps strings.
IF
NRD_OnActionStateEnter(_Character, "Shoot")
THEN
//NRD_ActionStateGetInt((CHARACTERGUID), )
NRD_DebugLog("Player Shoot Event");
//NRD_DebugLog(_CharGUIDString);

IF
NRD_OnActionStateEnter(_Character, "hit")
THEN
//NRD_ActionStateGetInt((CHARACTERGUID), )
NRD_DebugLog("Player hit Event");


IF
TimerFinished("AStest")
THEN
NRD_Musketeer_AS_Timer();
*/
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "Musketeer_Mod"
